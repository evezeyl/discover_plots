---
title: "Discover plots and tables"
author: "Eve Zeyl Fiskebeck"
date: "`r format(Sys.time(), '%d %B, %Y')`"
params:
    data: "data/Cleaned_data_for_publication_STEC_isolate_inventory_WGS_20250205.xlsx"
    sheet: "Cleaned_data" 
    source_code: 'code/R'
execute: 
  echo: false
  cache: false
format: html
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:
      knitr.graphics.auto_pdf: true
editor_options: 
  chunk_output_type: console
---

- added Renv

```{r setup}
#| include: false
library(here)
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
library(ggalluvial)
library(ggfittext)
library(tidyr)
library(purrr)
library(svglite)
```

# Data check and cleaning 

NOTE: The data is not clean - This is not normal (you should provide the data set with a table that can be used directly in an analysis software - so the formating should be rechecked)

```{r}
data <- readxl::read_excel(here::here(params$data),
                           sheet = params$sheet,
                           na = "NA")
glimpse(data) 
```

data selection - to ease making graphs (and only cleaning what I must)

- based on lab data 
```{r}
# lab then sequence fields - that is why organized like that
# last those I do not think I will use but keep anyway for now
selected_data <- 
  data %>% 
  mutate(Source = if_else(Source.Group == "Human", Source.Group , "Non Human"),
         n = 1) %>%
  rename(stx.subtype_detail = stx.subtype) %>%
  mutate(stx.subtype = case_when(
    str_detect(stx.subtype_detail, "stx1") & str_detect(stx.subtype_detail, "stx2") ~ "stx1;stx2",
    str_detect(stx.subtype_detail, "stx1") & !str_detect(stx.subtype_detail, "stx2") ~ "stx1",
    str_detect(stx.subtype_detail, "stx2") & !str_detect(stx.subtype_detail, "stx1") ~ "stx2",
    TRUE ~ NA)) %>% 
  mutate(eae = if_else(eae.y =="0", "Abscent", "Present")) %>%
  select(Country, Source.Group, 
         Disease := `Disease..only.human.isolates.`,
         MLST, 
         stx.subtype, stx.subtype_detail,
         stx.other.method :=`stx_subtypes identified by other methods`,
         Serotype.O := SeroType.O, Serotype.H, SerotypeOH := O_H_combined_serotype, eae, eae.y,
         AMR.genes,
         Source, 
         Source.Subgroup, Year.Isolation, Institute, Isolate.ID,
         n
) 
glimpse(selected_data)
View(selected_data)
```


# Data quality check 


## Function to create summary table 
```{r summary table function}
# function for fast reuse of summary
my_summary_fun <- function(data) {
  data %>%
    select(-Isolate.ID, -AMR.genes) %>%
    mutate_all(factor) %>%
    summary(., maxsum = 400) %>%
    as.data.frame.matrix(row.names = NULL) %>% 
    mutate_all(~coalesce(., "")) %>%
    `rownames<-`( NULL ) 
}

```

Data check for homogeneity 

```{r}
summary_table <- 
  selected_data %>% 
  my_summary_fun()  

View(summary_table)
```

<!-- 
## Data control helpers
```{r}
selected_data %>%
  select(MLST) %>%
  distinct() %>%
  View()
```


THIS IS TO BE CHECKED : **Homoegeneizing NAs** 
_Ask for treatment_


- [x] Serotype O -> ONT = O Non typeable. O112ab, bc osv treated at different serotypes
- [x] Serotype H -> HNT = H Non typeable 

OK, I think we can let as is 
But for the column O:H serotype -> We leave as ONT:HNT possibilities (because we want it clear)

Need to homogeneize what is uncertain.
Could have done in beginning but prefer control

Camilla has fixed the MLST

- [x] eae  -> presence / abscence re-encoded

- [x] Data homogeneization 

Unknown disease its because its only for humans, while NA its not applicable
- so we week Unknown as is


```{r replacement function}
# Function to detect pattern in a cell and replace it by something else (eg. NA)
replace_with_XX <- function(astring, patterns, XX) {
  
  ## XX is what should the thing replaced with 
  
  # Test if there is a match with the cell to any replacement pattern
  replace_decision <- 
    any(unlist(
      lapply(patterns, function(x) grepl(x, astring))
      ))
  # True then replace with NA 
  ifelse(replace_decision, XX, astring)
}
```


```{r}
# The NA is already NA so we do not need to add (would mess up system)
NAs <- c("^ONT$", "^HNT$", "^ND$" )


# I finished to use Unknown as its more practical for the graph
homegeneized_data <- 
  selected_data %>%
  mutate(across(everything(), 
                ~ purrr::map_vec(., replace_with_XX, NAs, "Unknown")
         )) %>%
  # Now I need to replace NA also 
  mutate(across(everything(), 
                ~ purrr::map_vec(., function(x) ifelse(is.na(x), "Unknown",x))
         ))
  
  
```

--> 


Control 
```{r}
selected_data %>% 
  my_summary_fun() %>%
  View()
```


Export summary statistics
```{r}
write.table(selected_data %>% 
              select( -n ) %>%
              my_summary_fun(),
            here("results", "2025-02-05_summary_table.tsv"),
            sep = "\t", 
            col.names = T, row.names = F,
            quote = F)
```



# Data wrangling & make tables and graphs


## Table for Shiga Toxin Gene

```{r}

```






## Parallel sets (Sankey like) plots (I want adding to 100 %)

```{r}
homegeneized_data %>%
  glimpse()

# To be able to resize and adjust it appears that long format will be easier
long_data <- 
  homegeneized_data %>%
  select(-Isolate.ID) %>%
  mutate(Source = 
           ifelse(Source.Group == "Human", Source.Group, "Non\nhuman")
         ) %>%
  mutate_at(vars(stx), ~str_replace(., ";", "\n")) %>%
  mutate(nbrow = 1) %>%
  mutate(`%` = nbrow / sum(nbrow) * 100) %>%
  select(-Source.Group, -Institute, -Source.Subgroup, -nbrow) %>%
  # trying to order to make the graph a bit clearer
  arrange(Source, eae.x, stx, O.group, H.type, MLST) %>% 
  mutate(Origin  = Source) %>%
  # so all the columns we want to show in alluvial need to be in long format
  # But not the fill 
  to_lodes_form(key = "col",
                axes = c("Origin", "eae.x", "stx", "O.group","H.type", "MLST"),
                value = "stratum",
                id = "alluvium") 
head(long_data)
View(long_data)
```


```{r}
# to be able to resize the text we need to go to long format
global_parallel_plot <- 
  long_data %>%
  mutate(text_size = case_when(
    col == "Origin" | col == "eae.x" | col == "stx" ~ 1,
    col == "O.group" | col == "H.type" ~ 1,
    TRUE ~ .3)
    ) %>% 
  ggplot(., 
       aes(x = col, y = `%`,
           stratum = stratum, 
           alluvium = alluvium,
           label = stratum)) + 
  geom_alluvium(aes(fill = Source)) +
  #geom_stratum(width = 1/2) +
  geom_stratum() + 
  geom_fit_text(stat = "stratum", min.size = 1) +
  ggtitle("Percentage of isolates belonging to the classicaly typing systems") + 
  theme_minimal() 
```

Export the plot 
Curious seems that gemo_fit_text does not work nice with export in gg...
Export manually and works best
```{r}
# ggsave(filename = here::here("results", "global_parallel_plot.svg"),
#        plot = global_parallel_plot,
#        dpi = 300,
#        units = "cm",
#        width = 30, height = 10)
ggsave(filename = here::here("results", "global_parallel_plot2.png"),
       plot = global_parallel_plot,
       dpi = 300,
       units = "cm",
       width = 30, height = 10) 
```

