---
title: "Discover plots and tables"
author: "Eve Zeyl Fiskebeck"
date: "`r format(Sys.time(), '%d %B, %Y')`"
params:
    data: "data/Cleaned_data_for_publication_STEC_isolate_inventory_WGS_20250205.xlsx"
    sheet: "Cleaned_data" 
    source_code: 'code/R'
execute: 
  echo: false
  cache: false
format: html
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:
      knitr.graphics.auto_pdf: true
editor_options: 
  chunk_output_type: console
---

- added Renv

```{r setup}
#| include: false
library(here)
library(readxl)
library(dplyr)
library(readr)
library(stringr)
library(ggplot2)
library(ggalluvial)
library(ggfittext)
library(tidyr)
library(purrr)
library(svglite)
library(ggrepel)
library(gt)
library(webshot2)
library(forcats)
library(patchwork)
library(RColorBrewer)
library(pals)
#library(viridis)
#library(janitor)
#library(gtExtras)
#library(gtsummary)
# magick
here::i_am("code/1.discover_plots_tables.qmd")
```

# Data check and cleaning 

NOTE: The data is not clean - This is not normal (you should provide the data set with a table that can be used directly in an analysis software - so the formating should be rechecked)

```{r}
data1 <- readxl::read_xlsx(here::here(params$data),
                           sheet = params$sheet,
                           na = "NA",
                           col_types = "text"
                           ) 
# is not read proprely if other column type ! 
glimpse(data1) 
dim(data1) # 3418 This is ok
```

<!-- Croschecking data reading - seems some data not read proprely 
OK now that it is read as text 

```{r}
data1 %>%
  filter(Isolate.ID == "STEC-SSI-470"   | Isolate.ID == "654006") %>%
  select(sat, pet, pera)


names(data1)
levels(as.factor(data1$pet))
levels(as.factor(data1$sat))
levels(as.factor(data1$pera))
```
-->

# Data pretifying & for homogeneity for all datasets

```{r}
data <- 
  data1 %>%
  # Source added
  mutate(Source = if_else(Source.Group == "Human", Source.Group , "Non Human"),
         n = 1) %>%
  # rename col - homogeneity - simplicity
  rename(Serotype.O = SeroType.O, SerotypeOH := O_H_combined_serotype, 
         stx.other.method =`stx_subtypes identified by other methods`,
         Disease = Disease..only.human.isolates., eae = eae.y) %>%
  # Additional column stx classification vs detail
  mutate(Presence_stx = case_when(
    str_detect(stx.subtype, "stx1") & str_detect(stx.subtype, "stx2") ~ "stx1;stx2",
    str_detect(stx.subtype, "stx1") & !str_detect(stx.subtype, "stx2") ~ "stx1",
    str_detect(stx.subtype, "stx2") & !str_detect(stx.subtype, "stx1") ~ "stx2",
    TRUE ~ NA)) %>% 
  
  # pathogenecity island re-encoding
  mutate(Presence_eae = if_else(eae =="0", "Abscent", "Present"),
        Disease = if_else(Disease == "Unknown",  NA_character_, Disease) 
        )
# add here if other things detected and rerun
  
```

# Data selection - to ease making graphs (and only cleaning what I must)

- based on lab data 
```{r}
# lab then sequence fields - that is why organized like that
# last those I do not think I will use but keep anyway for now
selected_data <- 
  data %>% 
  select(Country, Source.Group, 
         Disease,
         MLST, 
         Presence_stx, stx.subtype,
         stx.other.method,
         Serotype.O, Serotype.H, SerotypeOH, Presence_eae, eae,
         AMR.genes,
         Source, 
         Source.Subgroup, Year.Isolation, Institute, Isolate.ID,
         n
) 
glimpse(selected_data)
#View(selected_data)
```


# Data quality check 


## Function to create summary table 
```{r summary table function}
# function for fast reuse of summary
my_summary_fun <- function(data) {
  data %>%
    select(-Isolate.ID, -AMR.genes) %>%
    mutate_all(factor) %>%
    summary(., maxsum = 400) %>%
    as.data.frame.matrix(row.names = NULL) %>% 
    mutate_all(~coalesce(., "")) %>%
    `rownames<-`( NULL ) 
}

```

### Data check for homogeneity 

```{r}
summary_table <- 
  selected_data %>% 
  my_summary_fun()  

#View(summary_table)
```

### Previous data check for info
> not needed anymore 

<!-- 
## Data control helpers - previous, now its not actual
```{r, eval = FALSE}
selected_data %>%
  select(MLST) %>%
  distinct() %>%
  View()
```


THIS IS TO BE CHECKED : **Homoegeneizing NAs** 
_Ask for treatment_


- [x] Serotype O -> ONT = O Non typeable. O112ab, bc osv treated at different serotypes
- [x] Serotype H -> HNT = H Non typeable 

OK, I think we can let as is 
But for the column O:H serotype -> We leave as ONT:HNT possibilities (because we want it clear)

Need to homogeneize what is uncertain.
Could have done in beginning but prefer control

Camilla has fixed the MLST

- [x] eae  -> presence / abscence re-encoded

- [x] Data homogeneization 

Unknown disease its because its only for humans, while NA its not applicable
- so we week Unknown as is


```{r replacement function, eval = FALSE}
# Function to detect pattern in a cell and replace it by something else (eg. NA)
replace_with_XX <- function(astring, patterns, XX) {
  
  ## XX is what should the thing replaced with 
  
  # Test if there is a match with the cell to any replacement pattern
  replace_decision <- 
    any(unlist(
      lapply(patterns, function(x) grepl(x, astring))
      ))
  # True then replace with NA 
  ifelse(replace_decision, XX, astring)
}
```


```{r, eval = FALSE}
# The NA is already NA so we do not need to add (would mess up system)
NAs <- c("^ONT$", "^HNT$", "^ND$" )


# I finished to use Unknown as its more practical for the graph
homegeneized_data <- 
  selected_data %>%
  mutate(across(everything(), 
                ~ purrr::map_vec(., replace_with_XX, NAs, "Unknown")
         )) %>%
  # Now I need to replace NA also 
  mutate(across(everything(), 
                ~ purrr::map_vec(., function(x) ifelse(is.na(x), "Unknown",x))
         ))
  
  
```

--> 

### Data control 
Control 
```{r}
# selected_data %>% 
#   my_summary_fun() %>%
#   View()
```

### Export summary statistics
```{r}
write.table(selected_data %>% 
              select( -n ) %>%
              my_summary_fun(),
            here("results", "2025-02-10_summary_table_col.tsv"),
            sep = "\t", 
            col.names = T, row.names = F,
            quote = F)
```


# Genes AMR and virulence checks - remove from data 
What data is inside (I did not look before)


```{r}
data_col <- 
  data %>% 
  names()

data_col

list_gene_data <- data_col[which (data_col == "asta"):which (data_col == "irea")]
length(list_gene_data)

list_gene_fine <-c('asta', 'ipad', 'saa', 'agg3a', 'cif', 'espj', 'toxb', 'aggd', 'lpfa', 'cfac', 'agg3d', 'katp', 'espa', 'ltca', 'cnf1', 'espc', 'espb', 'aata', 'agg4c', 'tccp', 'stx1a', 'ipah9', 'lnga', 'tir', 'cdtb', 'iss', 'espf', 'tsh', 'espp', 'virf', 'agg5a', 'sfas', 'k88ab', 'bfpa', 'efa1', 'capu', 'agga', 'eila', 'pic', 'cma', 'vat', 'agg4d', 'agg4a', 'cci', 'siga', 'aar', 'stx2a', 'ehxa', 'mchb', 'senb', 'aafd', 'iha', 'aggc', 'stx2b', 'fim41a', 'etpd', 'fasa', 'mcma', 'nleb', 'aafa', 'nlea', 'sat', 'feda', 'nfae', 'iron', 'suba', 'pet', 'pera', 'aafc', 'air', 'agg3c', 'aaic', 'eae', 'epea', 'gad', 'sepa', 'rpea', 'hlye', 'fedf', 'aap', 'orf4', 'aggr', 'f17a', 'nlec', 'orf3', 'cba', 'fana', 'stb', 'aafb', 'mchc', 'eata', 'sta1', 'agg3b', 'mchf', 'aggb', 'stx1b', 'f17g', 'celb', 'cofa', 'espi', 'agg4b', 'irea')

length(list_gene_fine)

setdiff(list_gene_fine, list_gene_data)
setdiff(list_gene_data, list_gene_fine)
```

102 genes consistent between reports AMR and list in script for the pipeline. 

But Camilla mentione 145 - incl. virulotyper -> found db - check which genes are searched additionally

```{r}
virulotyper_genes<- readr::read_tsv(here::here("results", "sequences_list_virulotyper"), col_names = "gene" )

virulotyper_genes <- 
  virulotyper_genes %>%
  mutate_at(.vars = "gene", ~str_remove(., "^>")) %>%
  separate(gene, into = "gene", sep = "_", extra = "drop") %>%
  distinct() %>%
  pull()

length(virulotyper_genes)
```

145 genes in virulotyper

- finding those in virulotyper that are not in AMR
```{r}
diff_virulence <- setdiff(virulotyper_genes, list_gene_fine)
dput(diff_virulence)

length(diff_virulence)
```

checking reporting of AMR data : if 0 or contains also ND

```{r}
AMR_data <- 
  data[,26:127] %>%
  mutate_all(factor)

AMR_data %>%
  summary(., maxsum = 400) %>%
    as.data.frame.matrix(row.names = NULL) %>% 
    mutate_all(~coalesce(., "")) %>%
    `rownames<-`( NULL )  # %>% View()
```

- only 0 So no ND 

### Genes with only 0

checking columns wich have only 0 -> so we can remove those from the data
we need to have the levels
```{r}
nb_rows <- as.character(nrow(AMR_data))
nb_rows
sum_AMR_data <- 
  AMR_data %>%
  mutate_all(as.character) %>%
  # Ensuring that we can differentiate from NA
  mutate_all(~str_replace(.x, "0", "1")) %>%
  mutate_all(as.numeric) %>%
  summarise_all(~sum(.x, na.rm = T)) %>%
  t() %>%
  tibble::as_tibble(rownames = "gene") %>%
  mutate_all(as.character)

# now we have those to remove
remove_AMR <- 
  sum_AMR_data %>%
  filter(V1 == nb_rows) %>%
  pull(gene)
  
dput(remove_AMR)
#data$ipad
length(remove_AMR)
```
28 genes ... to be removed (cf Output data for Camilla)
dput(remove_AMR)
c("ipad", "saa", "aggd", "cfac", "agg4c", "tccp", "ipah9", "lnga", 
"virf", "agg5a", "agga", "agg4d", "agg4a", "cci", "aafd", "aggc", 
"fasa", "aafa", "nfae", "aafc", "rpea", "hlye", "fana", "aafb", 
"eata", "aggb", "cofa", "agg4b")
## Update DATA remove 0 genes

```{r}
dim(data)
data <- 
  data %>%
  # remove genes with 0 
  select(!remove_AMR) 
  
```
Genes with only 0 - removed 


<!-- control that sat, pet, pera ok  -> they should not be empty
```{r , eval = FALSE}
glimpse(data)

levels(as.factor(data$sat))
levels(as.factor(data$pet))
levels(as.factor(data$pera))
```

OK, now its still ok 
--> 


# Table FOR Shiga Toxin Gene

## Global table 
```{r}
#Shiga 
stx_all <- 
  selected_data %>%
  select(Presence_stx, stx.subtype, Source) %>%
  mutate_all(~if_else(is.na(.), "ND", .)) %>%
  mutate(stx.subtype = str_remove_all(stx.subtype, " "),
         Presence_stx = factor(Presence_stx, levels = c("stx1", "stx2", "stx1;stx2", "ND"), 
                      ordered = T)
         ) %>%
  group_by(Presence_stx, stx.subtype, Source) %>%
  tally() %>%
  tidyr::spread(Source, value = n, fill = 0) 
  
stx_all
glimpse(stx_all)
levels(stx_all$Presence_stx)
```


Export Complete Shiga 
```{r}
write.table(stx_all,
            here("results", "2025-02-10_stx_all.tsv"),
            sep = "\t", 
            col.names = T, row.names = F,
            quote = F)
```


now we need to reduce the table 
- grouping <= 10 if in human or non human

```{r}
stx_compact <- 
  stx_all %>%
  ungroup() %>%
  mutate(stx.subtype = case_when(
    Human >= 10 | `Non Human` >= 10 ~ stx.subtype,
    TRUE ~ "Other"
  ))%>%
  group_by(Presence_stx, stx.subtype) %>%
  arrange(Presence_stx, stx.subtype)

#stx_compact %>% View()

dput(sort(unique(stx_compact$stx.subtype)))

# dput(sort(unique(stx_compact$stx.subtype)))  
stx_sub_levels <- 
  c("stx1a", "stx1c",  "stx1d", 
    "stx2a", "stx2b", "stx2c", "stx2d", "stx2e", "stx2f", "stx2g", 
    "stx2a;stx2c", "stx2a;stx2c;stx2d", 
    "stx1a;stx2a", "stx1a;stx2b", "stx1a;stx2c", "stx1a;stx2d", "stx1c;stx2b",
    "stx2a;stx2b",
    "Other", "ND", "Total")

names(stx_compact)
stx_compact_total <- 
  stx_compact %>%
  ungroup() %>%
  mutate(stx.subtype = factor(stx.subtype, levels = stx_sub_levels, ordered = T)) %>%
  group_by(Presence_stx, stx.subtype) %>%
  summarise(Human := sum(Human), `Non Human`:= sum(`Non Human`), .groups = "keep") 


# stx_compact_total %>% View()
```

## Tables with sums 
Adding sums per stx
```{r}
sums_stx <- 
  stx_compact_total %>%
  ungroup() %>%
  group_by(Presence_stx) %>%
  summarise(Human := sum(Human), `Non Human`:= sum(`Non Human`), .groups = "keep") %>%
  mutate(stx.subtype = "Total", .after = "Presence_stx") %>%
  mutate(stx.subtype = factor(stx.subtype, levels = stx_sub_levels, ordered = T)) %>%
  # we remove ND because it will be the same 
  filter(Presence_stx != "ND")


# Now merging so we can have display 
stx_compact_total <- 
  stx_compact_total %>%
  bind_rows(sums_stx) %>% 
  arrange(Presence_stx) 

# stx_compact_total %>% View()

# Output for an eventual manual formatting
write.table(stx_compact_total,
            here("results", "2025-02-10_stx_compact_Total.tsv"),
            sep = "\t",
            col.names = T, row.names = F,
            quote = F)


```

## simple pretty table with gt

https://gt.rstudio.com/
https://jthomasmock.github.io/gtExtras/
https://themockup.blog/static/slides/intro-tables.html#26
```{r}
stx_gt_table <- 
  stx_compact_total %>% 
  ungroup() %>%
  gt(rowname_col = "stx.subtype",
     groupname_col = "Presence_stx", 
     process_md = TRUE, 
     row_group_as_column = TRUE,
     rownames_to_stub = FALSE) %>%
  opt_table_lines(extent = "default") %>%
  tab_header(title = md("**Table 2:** Stx genes and stx subtypes identified in human and non-human sources.")) %>%
  tab_spanner(label =  "Source", 
              columns = c(Human, `Non Human`)) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
      ), 
    locations = cells_row_groups( ) ) %>%
  cols_align(
    align = "left") 
  


stx_gt_table 
```

## Export

```{r}
gtsave(stx_gt_table, "2025-02-10_stx_gt_table.png", here::here("results"))
```

# Parallel sets (Sankey like) plots (I want adding to 100 %)
Now I used ggalluvial 

## Prepare data - first exploration
```{r}
parallel_data1 <- 
  data %>%
  select(-eae) %>%
  select(Source, stx := Presence_stx, eae := Presence_eae, SerotypeOH, n) %>%
  # reformating for better display
  mutate(Source = str_replace(Source, "Non human", "Non\nHuman")) %>%
  mutate(stx = str_remove_all(stx, " ")) %>%
  mutate(stx = str_replace_all(stx, ";", "\n")) %>%
  mutate(`%` = n / sum(n) * 100) %>%
  # We need this column twice (under different names)
  mutate(Origin  = Source) %>%
  # trying to order to make the graph a bit clearer
  arrange(Source, eae, stx, SerotypeOH) 

glimpse(parallel_data1)
```

data check 
- stx with NA 
```{r}
parallel_data1 %>%
  mutate_all(factor) %>%
    summary(., maxsum = 400) %>%
    as.data.frame.matrix(row.names = NULL) %>%
    mutate_all(~coalesce(., "")) %>%
    `rownames<-`( NULL ) # %>%  View()

```


### Long format first exploration exploration
Transform to long format, as it appears to be better to adjust the plot
```{r}
parallel_data_long1 <- 
  parallel_data1 %>%
  # so all the columns we want to show in alluvial need to be in long format
  # But not the fill which is source
  to_lodes_form(key = "col",
                axes = c("Origin", "eae", "stx", "SerotypeOH"),
                value = "stratum",
                id = "alluvium") 
head(parallel_data_long1)
# View(parallel_data_long1)
```


First view of the plot (here I did not filter aex)

```{r}
# to be able to resize the text we need to go to long format
global_parallel_plot1 <- 
  parallel_data_long1 %>%
  ggplot(.,
         aes(x = col, y = `%`,
             stratum = stratum, 
             alluvium = alluvium,
             label = stratum)) +
  geom_alluvium(aes(fill = Source)) +
  geom_stratum() +
  # Need to be first
  ggrepel::geom_text_repel(
    data = parallel_data_long1 %>%
      filter(col == "stx" & is.na(stratum)), 
    aes(label = "NA"),
    stat = "stratum", size = 3, direction = "y", nudge_x = -.5) +
  # need to be second
   geom_fit_text(
       stat = "stratum", min.size = 1) +
  ggtitle("Percentage of isolates belonging to the classicaly typing systems") + 
  theme_minimal() 

global_parallel_plot1
```


```{r}
ggsave(filename = here::here("results", "global_parallel_plot1.png"),
       plot = global_parallel_plot1,
       dpi = 300,
       units = "cm",
       width = 30, height = 10)
```



## Preparing for final plotting - order and grouping some variables 

```{r}
dput(unique(unique(parallel_data1$stx)))
#c("stx1", "stx1\nstx2", "stx2", NA)
dput(unique(unique(parallel_data1$eae)))
#c("Abscent", "Present")

# We consider cases where NA are possible
# Levels are ordered
source_levels <- c(unique(parallel_data1$Source), NA)
eae_levels <- c("Present", "Abscent", NA)
stx_levels <- c("stx1", "stx2", "stx1\nstx2", NA)

sero_count <- 
  parallel_data1 %>%
  select(SerotypeOH, n) %>%
  group_by(SerotypeOH) %>%
  summarise(sero_sum := sum(n), .groups = "keep") %>%
  arrange(desc(sero_sum)) %>%
  mutate(sero_transfo = if_else(sero_sum >= 50, SerotypeOH, "Other"))


# those are those to group as Other
sero_other <- 
  sero_count %>% 
    filter(sero_transfo == "Other") %>%
    pull(SerotypeOH)

length(sero_other) # 237 

# order levels
sero_levels <- 
  sero_count %>%
  filter(sero_transfo != "Other") %>%
  pull(SerotypeOH)

sero_levels <- c(sero_levels, "Other", NA)

length(sero_levels) #10 + 1  Other should be ok
```

Now I can get the data set with the groups and ordered levels 

! HERE we do not want to drop NA levels

```{r}
parallel_data2 <- 
  parallel_data1 %>%
  # Needs to be done first - because otherwise levels will not be changed
  mutate(SerotypeOH  = if_else(SerotypeOH %in% sero_other, "Other", SerotypeOH)) %>%
  # it needs to be Origin that is ordered - its the one used in the stash for plot
  # remove does not help : Source = factor(Source, levels = source_levels, ordered = T, exclude = NULL),
  mutate(Origin = factor(Source, levels = source_levels, ordered = T, exclude = NULL),
         eae = factor(eae, levels = eae_levels, ordered = T, exclude = NULL),
         stx = factor(stx, levels = stx_levels, ordered = T, exclude = NULL),
         SerotypeOH = factor(SerotypeOH, levels = sero_levels, ordered = T, exclude = NULL)
         )

glimpse(parallel_data2)
str(parallel_data2)
#parallel_data2 %>% View()
```



### Counts 
I do not want the counts before because I want to be sure the factor order are respeced 
and that is done above in parallel2_data 
so its better to modify here 

! IF NA count is not 0 - needs to be modified 

```{r}
# Improving way to set levels to avoid errors
count_origin <- 
  parallel_data2 %>%
  group_by(Origin) %>%
  summarise(sum_Origin = sum(n)) 
  
source_levels <- paste(count_origin$Origin, count_origin$sum_Origin,  sep = "\n")
source_levels

count_eae <- 
  parallel_data2 %>%
  group_by(eae) %>%
  summarise(sum_eae = sum(n)) 
count_eae

eae_levels <- paste(count_eae$eae, count_eae$sum_eae, sep = "\n")
eae_levels

count_stx <- 
  parallel_data2 %>%
  group_by(stx) %>%
  summarise(sum_stx = sum(n)) 

count_stx


stx_levels <- paste(count_stx$stx, count_stx$sum_stx, sep = "\n")
stx_levels

#OH levels for those grouped
count_OH <- 
  parallel_data2 %>%
  group_by(SerotypeOH) %>%
  summarise(sum_OH = sum(n)) 
count_OH 

sero_levels <- paste(count_OH$SerotypeOH, count_OH$sum_OH, sep = "\n")
sero_levels
```

### Recoding factors 
recoding factors  eg. https://www.spsanderson.com/steveondata/posts/2024-03-05/index.html
dplyr: https://dplyr.tidyverse.org/reference/recode.html

```{r}
# Now we need to adjust the table 
# need to recode factors 

parallel_data3 <- parallel_data2
glimpse(parallel_data3)
# because I kept the order this could work
# NO NA -> here I add brachets for clarity for n ()
levels(parallel_data3$Origin)
parallel_data3$Origin <- fct_recode(parallel_data3$Origin, 
                                 "Human\n(2405)" = "Human", 
                                  "Non\nHuman\n(1013)" = "Non Human")
parallel_data3$eae<- fct_recode(parallel_data3$eae,
                                "eae+\n(1821)" = "Present",
                                "eae-\n(1597)" = "Abscent")

# Here there is  NA 
parallel_data3$stx<- fct_recode(parallel_data3$stx,
                                "stx1\n(850)"    = "stx1",
                                "stx2\n(1755)"   = "stx2", 
                                "stx1;\nstx2\n(791)"   = "stx1\nstx2",
                                "NA\n(22)"  = NA_character_)

# last no NA 
sero_levels
parallel_data3$SerotypeOH<- fct_recode(parallel_data3$SerotypeOH, 
                                       "O157:H7\n(785)" = "O157:H7",
                                       "O26:H11\n(419)" = "O26:H11",
                                       "O146:H21\n(154)"= "O146:H21",
                                       "O103:H2\n(149)" = "O103:H2",
                                       "O91:H14\n(130)" = "O91:H14",
                                       "O128ab:H2 (105)" = "O128ab:H2",
                                       "O111:H8 (73)" = "O111:H8",
                                       "O146:H28 (66)"= "O146:H28",
                                       "O145:HNT (54)"= "O145:HNT",
                                       "Other\n(1483)" = "Other"
                                       )




# This part should have been done better ...
levels(parallel_data3$SerotypeOH)
```


```{r}
# now dropping unused factors 
parallel_data3 <- 
  parallel_data3 %>%
  #arrange(Origin, eae, stx, SerotypeOH) %>%
  rename(`SerotypeO:H` = SerotypeOH) %>%
  mutate(across(where(is.factor), fct_drop))
  

#View(parallel_data3)
str(parallel_data3)
levels((parallel_data3$Origin))

```

### Long format data for final 

```{r}
parallel_data_long3 <- 
  parallel_data3 %>%
  # this did not work 
  # But not the fill which is source
  to_lodes_form(key = "Types",
                axes = c("Origin", "eae", "stx", "SerotypeO:H"),
                value = "stratum",
                id = "alluvium") 
```



I do not think I can optimize the flow 
https://stackoverflow.com/questions/72676582/confluencing-merging-flows-in-ggalluvial
would need to recode everything  eg. 
https://stackoverflow.com/questions/62365650/r-question-how-to-mimic-this-graph-to-show-the-percent-change-of-cells-in-healt/62372948#62372948
https://heads0rtai1s.github.io/2019/06/06/visuals-alluvial-ggalluvial/

But maybe I can in I am doing myself the long format table 


### Final Plot1

```{r}
# to be able to resize the text we need to go to long format
parallel_data_long3 %>%
  ggplot(., aes(x = Types, y = `%`,  stratum = stratum,  alluvium = alluvium,
                label = stratum)) +
  # , aes.bind = "alluvia"
  geom_alluvium(aes(fill = Source)) +
  #geom_stratum(width = 1/2) +
  geom_stratum() + 
  # Need to be first
  # ! REMEMBER to change NA if changed - incl. way to filter
  ggrepel::geom_text_repel(
    data = parallel_data_long3 %>%
      filter(Types == "stx" & (stratum == "NA\n(22)")), 
    aes(label = "NA (22)"),
    stat = "stratum", size = 3, direction = "y", nudge_x = -.5) +
  # need to be second
   geom_fit_text(
       stat = "stratum", min.size = 1) +
  # aes(label = ifelse(col == "stx" & is.na(stratum), "NA", NA)),
  #  stat = "stratum", size = 1, direction = "y", nudge_x = -.5) +
  ggtitle("Percentage of isolates belonging to the classicaly typing systems") + 
  theme_minimal() 


```


Test reorganisation 

https://corybrunson.github.io/ggalluvial/reference/stat_flow.html

NB : using those options earlier might have avoided all the definition of factors (eg. most abundant on top) but that was already done
Will know for next time

- This is the best and most logical one I think

```{r}
#display.brewer.pal(11, "Spectral")
#brewer.pal(11, "Spectral")
human_fill_pal <- c( "Human" = "#3288BD"  , "Non Human" = "#ABDDA4" ) 


global_parallel_plot3 <- 
 parallel_data_long3 %>%
  ggplot(., aes(x = Types, y = `%`,
             stratum = stratum, 
             alluvium = alluvium,
             label = stratum)
         ) +
  geom_stratum(alpha = .5) +
  ggrepel::geom_text_repel(
    data = parallel_data_long3 %>%
      filter(Types == "stx" & (stratum == "NA\n(22)")), 
    aes(label = "NA (22)"),
    stat = "stratum", size = 3, direction = "y", nudge_x = -.5) +
  # need to be second
   geom_fit_text(
       stat = "stratum", min.size = 1) +
  geom_flow(aes(fill = Source), aes.bind = TRUE) + 
  scale_fill_manual(values = human_fill_pal) +
  ggtitle("Percentage of isolates belonging to the classicaly typing systems") + 
  theme_minimal() 

global_parallel_plot3
```


###  Export the final plot 

```{r}
scaling <- 3
ggsave(filename = here::here("results", "2025-02-10_global_parallel_plot3.png"),
       plot = global_parallel_plot3,
       dpi = 100*scaling,
       units = "px",
       bg = "white",
       width = 1920*scaling, height = 1211*scaling) 
```


### Non typeable 

```{r}
low_cov <- 
  data %>%
  select(Avg.Scaffold.coverage, Presence_stx, Serotype.O, Serotype.H,  MLST, Number.cgMLST.loci) %>%
  arrange(Avg.Scaffold.coverage) %>%
  mutate(stx_NT = ifelse(is.na(Presence_stx), "Non Typeable", "Typed"),
         O_NT = ifelse(Serotype.O == "ONT", "Non Typeable", "Typed"), 
         H_NT = ifelse(Serotype.H == "HNT", "Non Typeable", "Typed"), 
         MLST_NT = ifelse(Serotype.O == "ND", "Non Typeable", "Typed")
         ) %>%
  mutate_at(vars(Avg.Scaffold.coverage), as.numeric)
  # fixed changed of types ok 

head(low_cov)
glimpse(low_cov)

low_cov_long <-
  low_cov %>%
  pivot_longer(
    cols = c(stx_NT, O_NT, H_NT,  MLST_NT),
    names_to = "Typing Method", 
    values_to = "Typeable"
    )

```



```{r}
plot_cov1 <- low_cov_long %>%
  ggplot(aes(x = Typeable,  y = Avg.Scaffold.coverage, fill = `Typing Method`)) +
  geom_boxplot() +
  theme_bw()
plot_cov1 

plot_cov2 <- 
  low_cov_long %>%
  ggplot(aes(x = Typeable,  y = Avg.Scaffold.coverage, fill = `Typing Method`)) +
  geom_boxplot() +
  ylim(c(0,30)) +
  theme_bw()

plot_cov2


avge_cov_plot <- 
  plot_cov1 + plot_cov2 +
  plot_annotation(
    title = "Average Scaffold coverage and Typing success") + 
  plot_layout(guides = "collect")


ggsave(filename = here::here("results", "avge_cov_plot.png"),
       plot = avge_cov_plot,
       dpi = 300,
       units = "cm",
       bg = "white",
       width = 30, height = 10) 

```

# Plot : Country + source group + number of isolates 

# ! FIXME HERE 

```{r}
# That is for better aesthetics
data <- 
  data %>% 
  mutate(`Source Group` = case_when(
    Source.Group == "Wild_animals"~ "Wild animals",
    Source.Group == "Zoo_animals" ~ "Zoo animals",
    Source.Group == "Fruit_vegetables" ~ "Fruit vegetables",
    TRUE ~ Source.Group)) 
glimpse(data)
# To have the counts it needs to be precalculated 


# need to get the order correctly 
country_order <- 
  data %>%
  count(Country) %>%
  arrange(desc(n)) %>%
  pull(Country)

groups_order <- 
  data %>%
  count(`Source Group`) %>%
  arrange(n) %>%
  pull(`Source Group`)


Country_count  <- 
  data %>%
  mutate(Country = factor(Country, levels = country_order, ordered = T),
         `Source Group` = factor(`Source Group`, levels = groups_order, ordered = T)) %>%
  count(Country, `Source Group`) 

glimpse(Country_count)
groups_order

Country_Origin_plot <- 
  ggplot(Country_count, aes(x = Country, fill = `Source Group`, y = n)) + # Use pre-calculated n
  geom_bar(stat = "identity") +  # Important: Use stat = "identity"
  geom_text_repel(
    aes(label = n),
    stat = "identity",      # Important: Use stat = "identity"
    position = position_stack(vjust = 0.5),
    min.segment.length = 0,
    box.padding = 0.25,
    point.padding = 0.25,
    # direction = "y",
    force = 0.01,
    segment.color = "grey50",  # Color of the segment
    segment.size = 0.5,       # Thickness of the segment
    size = 3
  ) + 
  #scale_fill_viridis_d(option = "E") +
  scale_fill_brewer(palette = "Spectral") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust= 0.5)) 
  
 #display.brewer.all()
Country_Origin_plot

scaling <- 3
ggsave(filename = here::here("results", "2025-02-10_Country_Origin_plot.png"),
       plot = Country_Origin_plot,
       dpi = 100*scaling,
       units = "px",
       bg = "white",
       width = 1920*scaling, height = 1211*scaling) 

```



# Plot Human data + disease plot (barplot with disease) 
- `fill per country? 

# ! FIXME HERE

```{r}
human_data <- 
  data %>%
  filter(`Source Group` == "Human") %>%
  select(Disease, Country) %>%
  mutate(Disease = if_else(is.na(Disease), "Unknown", Disease))
  
glimpse(human_data)
  
disease_order <- 
  human_data %>%
  count(Disease) %>%
  arrange(desc(n)) %>%
  pull(Disease) 

disease_order
# just to have same labelling to make comparisons easier ? 
country_order2 <- 
  human_data %>%
  count(Country) %>%
  arrange(n) %>%
  pull(Country) 

country_order2
# Here aim is to try to keep contries in same order
human_data2 <- 
  human_data %>% 
  mutate(Country = factor(Country, levels = country_order2, ordered = T),
         Disease = factor(Disease, levels = disease_order, ordered = T, exclude = NULL)) %>%
  count(Disease, Country) %>%
  arrange(Disease, Country)
  
head(human_data2)
# Test 
disease_country_plot <- 
  ggplot(human_data2, aes(x = Disease, fill = Country, y = n)) + # Use pre-calculated n
  geom_bar(stat = "identity") +  # Important: Use stat = "identity"
  geom_text_repel(
    aes(label = n),
    stat = "identity",      # Important: Use stat = "identity"
    position = position_stack(vjust = 0.5),
    min.segment.length = 0,
    box.padding = 0.25,
    point.padding = 0.25,
    # direction = "y",
    #force = 0.01,
    segment.color = "grey50",  # Color of the segment
    segment.size = 0.5,       # Thickness of the segment
    size = 3
  ) + 
  scale_fill_brewer(palette = "Spectral") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust= 0.5)) 
  
disease_country_plot

scaling <- 3
ggsave(filename = here::here("results", "2025-02-10_disease_country_plot.png"),
       plot = disease_country_plot,
       dpi = 100*scaling,
       units = "px",
       bg = "white",
       width = 1920*scaling, height = 1211*scaling) 


```


# Plot : Source non-human and subgroups
# ! FIXEME
```{r}
# To have the counts it needs to be precalculated 
non_human_data <- 
  data %>%
  filter(Source != "Human") %>%
  select(- "Source Group") %>% # because has been added 
  mutate_at(vars(Source.Subgroup, Source.Group), ~ str_replace_all(., "_", " ")) %>%
  rename(`Source Group` = Source.Group, 
         `Source Subgroup` = Source.Subgroup)
  
glimpse(non_human_data)
dim(non_human_data)


# need to get the order correctly 
source_group_order <- 
  non_human_data %>%
  count(`Source Group`) %>%
  arrange(desc(n)) 
source_group_order

source_subgroup_order <- 
  non_human_data %>%
  count(`Source Subgroup`) %>%
  arrange(n) 
source_subgroup_order

nbcolors <- length(unique(source_subgroup_order$`Source Subgroup`))
nbcolors


non_human_data <- 
  non_human_data %>%
  group_by(`Source Group`, `Source Subgroup`) %>%
  tally() %>%
  mutate(`Source Group` = factor(`Source Group`, levels = source_group_order$`Source Group`, ordered = T)) %>%
  mutate(`Source Subgroup` = factor(`Source Subgroup`, levels = source_subgroup_order$`Source Subgroup`, ordered = T)) 

non_human_data

# need a palette color with more discriminant colors (not sufficient otherwise)
# I can use alphabet it has 26 colors ... hum need to adjust somewhat
# https://r-charts.com/colors/
  
dput(unname(stepped3(26)))
dput(source_subgroup_order$`Source Subgroup`)

new_col_pal <- 
  c("Farmed shellfish"= "#3182BD", 
    "Sewage wastewater"=  "#6BAED6", 
    "Surface freshwater"= "#9ECAE1", 
    "Groundwater" = "#C6DBEF", 
    "Livestock unknown" = "#E6550D", 
    "Sheep" = "#FD8D3C", 
    "Cattle" = "#FDAE6B", 
    "Goats" = "#FDD0A2", 
    "Pigs" = "#FFB6C1",
    "Goats sheep petting" = "#8B1C62", 
    "Dogs" = "#8B5F65",
    "Horses donkeys"= "#8B4726",
    "Other mammals"= "#8B5A2B",
    "Nuts seeds incl oils thereof" = "#008B45", 
    "Vegetables" = "#74C476", 
    "Other" = "#FFFF00", 
    "Pheasants quails pigeons doves" = "#9E9AC8", 
    "Ducks geese and waterfowl" = "#BCBDDC", 
    "Other wild ruminants" = "#DADAEB", 
    "Deer" = "#636363", 
    "Rabbits hares" = "#969696", 
    "Wild boars" = "#BDBDBD", 
    "Moose elk" = "#D9D9D9")

subcategory_plot <- 
  ggplot(non_human_data, 
       aes(x = `Source Group`, fill = `Source Subgroup`, y = n)) + # Use pre-calculated n
  geom_bar(stat = "identity") +  # Important: Use stat = "identity"
  geom_text_repel(
    aes(label = n),
    stat = "identity",      # Important: Use stat = "identity"
    position = position_stack(vjust = 0.5),
    min.segment.length = 0,
    box.padding = 0.25,
    point.padding = 0.25,
    # direction = "y",
    force = 0.01,
    segment.color = "grey50",  # Color of the segment
    segment.size = 0.5,       # Thickness of the segment
    size = 3
  ) + 
  scale_fill_manual(values = new_col_pal) +
  coord_flip() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust= 0.5),
        legend.position="top") 
subcategory_plot

scaling <- 3
ggsave(filename = here::here("results", "2025-02-10_subcategory_plot.png"),
       plot = subcategory_plot,
       dpi = 100*scaling,
       units = "px",
       bg = "white",
       width = 1900*scaling, height = 900*scaling) 

```



# Output data for Camilla 

```{r}
dim(data)
ordered_amr_names <- sort(names(data)[26:99])

data <- 
  data %>%
  # Remove - only reformated for pretty plot
  select(-`Source Group`) %>%
  # Suggested order for reorganizing column orders
  # Source" is cleaned Human Non human , "stx.subtype" is stx1, stx2 ... I used for plots
  # Removed AliasID only NA
  select(Accession.Number, Isolate.ID,
         "Country", "Institute",
         "Year.Isolation",
         "Source", "Source.Group", "Source.Subgroup", "Source.Comment",
         "Age.group..only.human.isolates.", "Disease..only.human.isolates." := Disease,
         "Import..only.non.human.isolates.", 
         "Sample.Type",
         "Avg.Scaffold.coverage", "Burst.size",
         Number.cgMLST.loci, MLST,
         Presence_stx, stx.subtype, stx.other.method, Presence_eae,
         Serotype.O, Serotype.H, SerotypeOH,
         Species, Gene, Count.contaminants, AMR.genes,
         ordered_amr_names) 

data <- 
  data %>%
  mutate_at(vars(`Import..only.non.human.isolates.`), ~ if_else(. == "Unknown", NA_character_, . ))

data %>%
  write.table(., 
                here("results", "2025-02-10_reordered_data.tsv"),
            sep = "\t", 
            col.names = T, row.names = F,
            quote = F)
```

- sat, pet, pera   genes -> seens only O and NA -> it should not be
so I have to review the cleaning of the genes before export


